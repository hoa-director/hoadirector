/* You can add global styles to this file, and also import other style files */
@import "~bootstrap/dist/css/bootstrap.css";


.clickable {
  cursor: pointer;
}
/* Basic reset to make every browser render in the same way */
/* Universal selector will select each element on the page an apply these declarations */
/* using this allows you to start clean without any added margin or padding from the web browser */
*,
*::after,
*::before {
  margin: 0px;
  padding: 0px;

  /* when possible, we should inherit so move box-sizing boarder-box to body */
  box-sizing: inherit;
}

/* the global font size is set in the html element */
/* if we convert all our font size to rem, it will be based of the root font */
/* this is very helpful for making response sites, for example, when a a break point for mobile
need a way to decrease all the sizes with one font setting  */
/* why set the font-size to 10 instead of default 16px. So that we know that one rem is exactly 10px */
html {
  /* this defines what one rem is */
  /* font-size: 10px; */
  /* if we keep 10px here, it does not allow the user to make the default browser font size bigger
    so we set the font size to 62.5% of 16px, which is the default browser size, and end up with 10px here.
    now if the user changes the font size in the browser, the page will still be responsive */
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16; */
  /* Means that the line height is 1.7 times bigger than the pre defined line height */
  line-height: 1.7;
  /* color: $color-grey-dark; */
  color: darkgrey;

  /* to put a nice white boarder around the entire page, add padding to the body */
  /* padding: 30px; */
  padding: 3rem;
}


/* gird rules */
.row {
  // it is common to use 1140px however we want to use rems so divide by 10 to get 114rem
  max-width: $grid-width; // use max-width instead of width. if enough available e space it will be the size specific. if smaller, it will fill 100% of the space
  margin: 0 auto;

  // accept everything except the last child
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;

  // this is an attribute selector
  // the ^ allows us to select all that start with "col-"
  // the * selects any class tha contains "col-"
  // the $ is any class that ends with "col-"
  [class^="col-"] {
    // since we are using a float layout, we always float left
    // when using float, the height clears and goes to 0px
    // to fix this issue, need to use clearfix
    // see mixin clearfix to resolve this issue.
    float: left;

    // need to remove the gutter form the far right column
    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
  }

  .col-1-of-2 {
    // can mix units here in sass
    // to use the calc function in css, if we want to use a sass variable,
    // it need to have a # and wrapped by a curly braces.
    width: calc((100% - #{$gutter-horizontal}) / 2);
  }

  .col-1-of-3 {
    width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
  }

  // here we are taking the column defined in the 1-of-3 calculation above and
  // multiply it by 2 and add the gutter-horizontal
  .col-2-of-3 {
    width: calc(
      2 * ((100% - (2 * #{$gutter-horizontal})) / 3) + #{$gutter-horizontal}
    );
  }

  .col-1-of-4 {
    width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
  }

  .col-2-of-4 {
    width: calc(
      2 * ((100% - (3 * #{$gutter-horizontal})) / 4) + #{$gutter-horizontal}
    );
  }

  .col-3-of-4 {
    width: calc(
      3 * ((100% - (3 * #{$gutter-horizontal})) / 4) +
        (2 * #{$gutter-horizontal})
    );
  }
}